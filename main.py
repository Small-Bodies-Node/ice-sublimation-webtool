from flask import Flask, render_template, request, json, redirect, send_file
import os

app = Flask(__name__)

app.jinja_env.trim_blocks = True
app.jinja_env.lstrip_blocks = True

json_path = os.path.join(app.static_folder, 'json')

configurations_path = os.path.join(json_path, 'configurations')
# Provides the contents and structure to be generated by the navbar template.
with open(os.path.join(configurations_path, 'navbar.json')) as f:
    navbar_config = json.load(f)

data_path = os.path.join(json_path, 'data')
# Provides the arguments for each HTML form element.
with open(os.path.join(data_path, 'parameters.json')) as f:
    parameters_config = json.load(f)

info_path = os.path.join(json_path, 'info')
# Commonly used strings which don't belong in the other files.
with open(os.path.join(info_path, 'strings.json')) as f:
    strings_config = json.load(f)


@app.context_processor
def inject_configs():
    return dict(navbar_config=navbar_config,
                parameters_config=parameters_config,
                strings_config=strings_config,)


@app.route('/index')
@app.route('/')
def index():
    return form_template('specific')


@app.route('/calculation/<form>')
def form_template(form):
    form += '.json'
    with open(os.path.join(configurations_path, 'forms', form)) as f:
        form = json.load(f)
    return render_template('form_template.html', form_file=form)


@app.route('/sourceCode')
def sourceCode():
    return redirect('https://github.com/mvanselous/ice-sublimation')


@app.route('/smallBodiesNode')
def smallBodiesNode():
    return redirect('https://pds-smallbodies.astro.umd.edu/tools/ma-evap/index.shtml')


@app.route('/results', methods=['POST', 'GET'])
def calculation():
    # Moving forward, this information can be moved to another file
    core_outputs = ['Av', 'Air', 'r_H', 'obliquity']

    if request.method == 'GET':
        return 'bad request (invalid request method)'
    if request.method == 'POST':
        from survey_fastrot import survey_fastrot

        # Using this rather than installing numpy on the server
        from helperfunctions import linspace

        form_outputs = request.form

        arg_list = []
        species = str(form_outputs.get('species'))

        if species not in ["H2O", "H2O-CH4", "CO", "CO2"]:
            return 'bad request (invalid species)'

        variable = str(form_outputs.get('variable'))

        if variable not in core_outputs + ['All', 'None']:
            return 'bad request (invalid variable)'

        for idx in range(0, len(core_outputs)):
            if form_outputs.get(core_outputs[idx]) is not None:
                arg_list.append([float(form_outputs.get(core_outputs[idx]))])
            else:
                arg_list.append(linspace(float(form_outputs.get('min_' + core_outputs[idx])),
                                         float(form_outputs.get('max_' + core_outputs[idx])),
                                         int(form_outputs.get('n_' + core_outputs[idx]))))

        # append number of latitude steps
        arg_list.append(181)

        results = survey_fastrot(species, *arg_list)

        result_keys = list(results['results'][0].keys())
        return render_template('output_template.html', independent_var=variable, dependent_var="Zlog",
                               result_file=results, result_keys=result_keys)


@app.route('/results/<file>')
def send_results(file=None):
    if file is None:
        return 'bad request', 400
    else:
        file_path = os.path.join('/', 'tmp', file)
        try:
            return send_file(file_path, as_attachment=True)
        except:
            return file_path + ' not found', 400


if __name__ == "__main__":
    app.run()